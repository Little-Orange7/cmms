<?xml version="1.0" encoding="UTF-8"?>
<!--scan:当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载-->
<!--scanPeriod:设置监测配置文件是否有修改的时间间隔,如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为1分钟-->
<!--debug:当此属性设置为 true 时，将打印出 logback 内部日志信息-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="D:/log/cmms"/>
    <!-- 日志输出格式【控制台】 [%p][%c][%M][%L] -->
<!--    <property name="logPatternConsoleLog" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}   :%msg%n"/>-->
    <property name="logPatternConsoleLog" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%p) | [%thread] %cyan(%c) | %M[%magenta(%L)]  :%msg%n"/>
    <!-- 日志输出格式【日志文件】 -->
    <property name="logPattern" value="%date{yyyy-MM-dd HH:mm:ss} | %p | %c | %M:%L | %m%n"/>
    <!-- 日志输出编码格式 -->
    <property name="logCharset" value="UTF-8"/>
    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}   :%msg%n</pattern>-->
            <pattern>${logPatternConsoleLog}</pattern>
        </encoder>
    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
 所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">
            &lt;!&ndash;过滤 Error&ndash;&gt;
            <level>ERROR</level>
            &lt;!&ndash;匹配到就禁止&ndash;&gt;
            <onMatch>DENY</onMatch>
            &lt;!&ndash;没有匹配到就允许&ndash;&gt;
            <onMismatch>ACCEPT</onMismatch>
        </filter>-->
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
<!--        <File>${LOG_HOME}/info.${logback.appname}.log</File>-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
<!--            <FileNamePattern>${LOG_HOME}/TestWeb.log.%d{yyyy-MM-dd-HH-mm}.log</FileNamePattern>&lt;!&ndash;按照分钟来切分当天日志&ndash;&gt;-->
            <FileNamePattern>${LOG_HOME}/info.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern><!--文件名以当天为name,则当天日志都存放到一个当天定义的文件中-->
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>

        <!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${LOG_HOME}/info.${logback.appname}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>3</maxIndex>
        </rollingPolicy>
        &lt;!&ndash;当文件大小超过5MB时，通知RollingPolicy轮转，结合上述的FixedWindowRollingPolicy,将上述FixedWindowRollingPolicy注释掉&ndash;&gt;
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>-->
    </appender>
    <!-- Info -->
    <appender name="info1" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--  <appender>true</appender> -->

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!-- 每天生成日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/info.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 日志文件保留15天 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 格式化输出 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} | %thread | %-5level | %class{20}:%file\(%line\) | %msg%n</pattern>
        </encoder>
    </appender>
    <!--debug  -->
    <appender name="debug1" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- <appender>true</appender> -->

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
            <!--  <onMatch>ACCEPT</onMatch>
             <onMismatch>DENY</onMismatch>  -->
        </filter>
        <!-- 每天生成日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/debug.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 日志文件保留15天 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 格式化输出 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} | %thread | %-5level | %class{20}:%file\(%line\) | %msg%n</pattern>
        </encoder>
    </appender>
    <!--    <appender name="info_async" class="ch.qos.logback.classic.AsyncAppender">
           <discardingThreshold>3000</discardingThreshold>
           <queueSize>10000</queueSize>
           <appender-ref ref="info" />
       </appender> -->

    <!-- show parameters for hibernate sql 专为 Hibernate 定制 -->
    <!--<logger name="org.hibernate.type.descriptor.sql.BasicBinder"  level="TRACE" />
    <logger name="org.hibernate.type.descriptor.sql.BasicExtractor"  level="DEBUG" />
    <logger name="org.hibernate.SQL" level="DEBUG" />
    <logger name="org.hibernate.engine.QueryParameters" level="DEBUG" />
    <logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" />-->

    <!--myibatis log configure-->
    <!--<logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>-->

    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="console" />
        <appender-ref ref="FILE" />
<!--        <appender-ref ref="info1" />-->
<!--        <appender-ref ref="debug1" />-->
    </root>
    <!--日志异步到数据库 -->
    <!--<appender name="DB" class="ch.qos.logback.classic.db.DBAppender">-->
    <!--&lt;!&ndash;日志异步到数据库 &ndash;&gt;-->
    <!--<connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">-->
    <!--&lt;!&ndash;连接池 &ndash;&gt;-->
    <!--<dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
    <!--<driverClass>com.mysql.jdbc.Driver</driverClass>-->
    <!--<url>jdbc:mysql://127.0.0.1:3306/databaseName</url>-->
    <!--<user>root</user>-->
    <!--<password>root</password>-->
    <!--</dataSource>-->
    <!--</connectionSource>-->
    <!--</appender>-->
</configuration>
